$hr
# Project specific settings
$hr
#if 'zeo' in $mode:
#set $zeocomment=''
#else
#set $zeocomment='#'
#end if
#if $with_ploneproduct_fss
#set $fsscomment=''
#else
#set $fsscomment='#'
#end if
#if $with_ploneproduct_ploneappblob
#set $blobcomment=''
#else
#set $blobcomment='#'
#end if
#if $with_no_zcml
#set $zcmlcomment='#'
#else
#set $zcmlcomment=''
#end if
#if $with_ploneproduct_paasync
#set $asynccomment=''
#else
#set $asynccomment='#'
#end if
#if $with_ploneproduct_etherpad
#set $etherpadcomment=''
#else:
#set $etherpadcomment='#'
#end if
#if $with_ploneproduct_sgdcg
#set $sgdgcomment=''
#else
#set $sgdgcomment='#'
#end if
#if $with_supervisor_instance1
#set $si1='true'
#else:
#set $si1='false'
#end if
#if $with_supervisor_instance2
#set $si2='true'
#else:
#set $si2='false'
#end if
#if $with_supervisor_instance3
#set $si3='true'
#else:
#set $si3='false'
#end if
#if $with_supervisor_instance4
#set $si4='true'
#else:
#set $si4='false'
#end if
#if $with_zeo_socket:
#set zeoa = '${buildout:directory}/var/zeocl.sock'
#set zeoh = '#${hosts:zeo}:${ports:zeo}'
#else
#set zeoa= '${hosts:zeo}:${ports:zeo}'
#end if
#if $with_ploneproduct_paasync
#set $asynccomment=''
#else
#set $asynccomment='#'
#end if
#if 'zeo' in $mode:
#set $zeocomment=''
#else
#set $zeocomment='#'
#end if

[v]

project-programs = #slurp
#if $with_ploneproduct_paasync
    10 zeo \${locations:zeoserver}/bin/runzeo \${locations:zeoserver} true \${users:zope}
    20 instance-worker (autostart=\${v:autostart_instancewk}) \${buildout:directory}/bin/instance-worker [console] true \${users:zope}
#end if
#if $major > 3:
    21 instance1 (autostart=\${v:autostart_instance1}) \${buildout:directory}/bin/instance1 [console]  true \${users:zope}
    22 instance2 (autostart=\${v:autostart_instance2}) \${buildout:directory}/bin/instance2 [console]  true \${users:zope}
    23 instance3 (autostart=\${v:autostart_instance3}) \${buildout:directory}/bin/instance3 [console]  true \${users:zope}
    24 instance4 (autostart=\${v:autostart_instance4}) \${buildout:directory}/bin/instance4 [console]  true \${users:zope}
${sgdgcomment}    40 instance-newsletter (autostart=\${v:autostart_instancesg}) \${buildout:directory}/bin/instance-newsletter  [console]                                        true \${users:zope}
#else
${si1}    21 instance1 (autostart=\${v:autostart_instance1}) \${buildout:directory}/parts/instance1/bin/runzope true \${users:zope}
${si2}    22 instance2 (autostart=\${v:autostart_instance2}) \${buildout:directory}/parts/instance2/bin/runzope true \${users:zope}
${si3}    23 instance3 (autostart=\${v:autostart_instance3}) \${buildout:directory}/parts/instance3/bin/runzope true \${users:zope}
${si4}    24 instance4 (autostart=\${v:autostart_instance4}) \${buildout:directory}/parts/instance4/bin/runzope true \${users:zope}
${sgdgcomment} 40 instance-newsletter (autostart=\${v:autostart_instancesg}) \${buildout:directory}/parts/instance-newsletter/bin/runzope  true \${users:zope}
#end if
filesystem-parts =
    touch
    chmod
    chown
    mkdirs
project-parts =
    env
    grp
#if $major < 4:
    zope2
#end if
    productdistros
    zeoserver
    instance-plain
    instance
    instance1
    instance2
    instance3
    instance4
${sgdgcomment}    instance-newsletter
${asynccomment}    instance-worker
    zopepy
    backup
    omelette
    ${sane_name}.test

[buildout]
versions=versions
sources = sources
# project packages
eggs =
    Pillow
zcml =
# extra directories oto add to the python path
extra-paths =
auto-checkout =
#if $with_ploneproduct_ploneappblob and ($major < 4)
    Products.CMFEditions
# else
#    Products.CMFEditions
#end if
# $autocheckout.sort()
#for $item in $autocheckout:
    $item
#end for
# see http://pypi.python.org/pypi/mr.developer for documentation

# auto tracked developement products
[sources]

[versions]
# never ever pin paste and other base eggs
Paste =
PasteDeploy =
PasteScript =
ZopeSkel =
docutils =

#if ($with_ploneproduct_z3crelationfield or $with_ploneproduct_ploneappblob) and ($major < 4)
#$with_ploneproduct_z3crelationfield
#with_ploneproduct_ploneappblob
# needed a recent ZODB version for some packages
ZODB3 = 3.8.4
#else
#if $major < 4
# version with barebone zope2 eggified
ZODB3 = 3.7.2
#end if
#end if

#if $major < 4:
plone.recipe.zope2install = 3.2
#end if
# do not fix latest templates
ZopeSkel =
# do not fix for latest Cheetah sake
Markdown =

# MISC
etherpad = 1.2.7
#if $with_ploneproduct_etherpad
nodejs = 0.8.9
#nodejs = 0.10.0
#else
nodejs = 0.10.0
#end if

libxml2 = 2.9.1
libxslt = 1.1.28

[remotes]
# Plone
plone = git://github.com/plone
plone_push = git@github.com:plone
svn_plone = https://svn.plone.org/svn/plone
#svn_plone = http://svn.plone.org/svn/plone

# Collective
collective = git://github.com/collective
collective_push = git@github.com:collective
svn_collective = https://svn.plone.org/svn/collective
#svn_collective = http://svn.plone.org/svn/collective

#if $major < 4
# Zope operating instances are created elsewhere.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2install
[zope2]
recipe = plone.recipe.zope2install
url = \${versions:zope2-url}
# fake eggs are required to satisfy Zope dependencies while
# zope is not yet eggified.
fake-zope-eggs = true
additional-fake-eggs =
    ZConfig
    pytz
    Zope2
    Acquisition
    zope.testing
skip-fake-eggs =
    pytz
    ZConfig
    ZODB3
# inter zope2.10 / zope 2.12
    five.localsitemanager
    zope.app.publisher
    zope.component
    zope.container
    zope.lifecycleevent
    zope.i18n
    zope.interface
    zope.location
    zope.proxy
    zope.publisher
    zope.schema
    zope.sendmail
    zope.site
    zope.testing
#end if

[locations]
zope2=\${buildout:parts-directory}/zope2
instance1=\${buildout:parts-directory}/instance1
instance2=\${buildout:parts-directory}/instance2
instance3=\${buildout:parts-directory}/instance3
instance4=\${buildout:parts-directory}/instance4
instance=\${buildout:parts-directory}/instance
productdistros=\${buildout:parts-directory}/productdistros
zeoserver=\${buildout:parts-directory}/zeoserver

[zeoserver]
#if $major < 4:
recipe = plone.recipe.zope2zeoserver
zope2-location = \${locations:zope2}
#else
recipe = plone.recipe.zeoserver
#end if
#if $with_zeo_socket:
# zeo-address = $zeoh
#end if
blob-storage = \${locations:blob-storage}
zeo-address = $zeoa
socket-name = \${buildout:directory}/var/zeo.zdsock
zeo-conf-additional =
${asynccomment}    <filestorage 2>
${asynccomment}        path \${buildout:directory}/var/filestorage/Async.fs
${asynccomment}    </filestorage>
#if $major < 4:
    %import tempstorage
    <temporarystorage temp>
        name temporary storage for sessioning
    </temporarystorage>
#end if

eggs = ZopeUndo
    ZODB3
#if $with_ploneproduct_ploneappblob or ($major > 3):
    plone.app.blob
#end if
#if $with_ploneproduct_paasync
    \${instance:eggs}
#end if

[instance]
recipe = plone.recipe.zope2instance
verbose-security=\${v:verbose-security}
#if $major < 4
zope2-location = \${locations:zope2}
#end if
zeo-client-cache-size = \${cache:zeo-client-cache-size}
zeo-client = on
zeo-address = \${zeoserver:zeo-address}
temporary-storage =
    <zeoclient>
    server \${zeoserver:zeo-address}
        storage temp
        name zeostorage
        var \${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

#if $with_ploneproduct_ploneappblob or ($major > 3):
blob-storage = \${zeoserver:blob-storage}
shared-blob = on
#end if
http-address = \${hosts:instance}:\${ports:instance}
user = \${zope:user}:\${zope:password}
session-timeout-minutes = \${cache:session-timeout-minutes}
event-log-level = \${zope:event-log-level}
z2-log-level = \${zope:z2-log-level}
#webdav-address = \${hosts:webdav}:\${ports:webdav}
zodb-cache-size = 50000
zeo-client-cache-size = 5MB

# attacking zopepy:eggs make instance be built after zopepy
# in any case thx to the buildout automatic parts sort.
extra-paths = \${buildout:extra-paths}
eggs = \${buildout:eggs}
# security hotfixes
#    Products.PloneHotfix20110720
#for $product in $additional_eggs:
#if product.startswith('#'):
$product
#else:
    ${product}
#end if
#end for

products =
    \${buildout:directory}/products
    \${locations:productdistros}

zcml =
    \${buildout:zcml}

#for $product in $plone_zcml:
#if product.startswith('#'):
${product}
#else:
${zcmlcomment}    ${product}
#end if
#end for
#zope-conf-additional=

# plone.app.async instance if any
${asynccomment}zcml-additional =
${asynccomment}    <include package="plone.app.async" file="multi_db_instance.zcml" />
environment-vars =
    zope_i18n_compile_mo_files = true
    TMPDIR = \${locations:tmp}
${asynccomment}    ZC_ASYNC_UUID \${buildout:directory}/var/instance-uuid.txt
${asynccomment}zope-conf-additional =
${asynccomment}    <zodb_db async>
${asynccomment}        cache-size \${instance:zodb-cache-size}
${asynccomment}        <zeoclient>
${asynccomment}            server \${zeoserver:zeo-address}
${asynccomment}            storage 2
${asynccomment}            name asyncstorage
${asynccomment}            blob-dir \${zeoserver:blob-storage}
${asynccomment}            shared-blob-dir on
${asynccomment}            var \${buildout:parts-directory}/instance/var
${asynccomment}            cache-size \${instance:zeo-client-cache-size}
${asynccomment}        </zeoclient>
${asynccomment}        mount-point /zasync
${asynccomment}    </zodb_db>


# plone.app.async instance if any
${asynccomment}[instance-worker]
${asynccomment}<= instance
${asynccomment}webdav-address =
${asynccomment}http-address = \${hosts:instance-worker}:\${ports:instance-worker}
${asynccomment}zcml-additional =
${asynccomment}    <include package="plone.app.async" file="multi_db_worker.zcml"/>
${asynccomment}environment-vars =
${asynccomment}    zope_i18n_compile_mo_files = true
${asynccomment}    ZC_ASYNC_UUID \${buildout:directory}/var/worker-uuid.txt
${asynccomment}zope-conf-additional =
${asynccomment}    <zodb_db async>
${asynccomment}        cache-size \${instance-worker:zodb-cache-size}
${asynccomment}        <zeoclient>
${asynccomment}            server \${zeoserver:zeo-address}
${asynccomment}            storage 2
${asynccomment}            name asyncstorage
${asynccomment}            blob-dir \${zeoserver:blob-storage}
${asynccomment}            shared-blob-dir on
${asynccomment}            var \${buildout:parts-directory}/worker/var
${asynccomment}            cache-size \${instance-worker:zeo-client-cache-size}
${asynccomment}        </zeoclient>
${asynccomment}        mount-point /zasync
${asynccomment}    </zodb_db>
${asynccomment}    <product-config zc.z3monitor>
${asynccomment}        port \${ports:workermonitor}
${asynccomment}    </product-config>
${asynccomment}zserver-threads = 2
${asynccomment}zeo-address = \${zeoserver:zeo-address}
${asynccomment}blob-storage = \${zeoserver:blob-storage}

[instance1]
<= instance
http-address = \${hosts:instance1}:\${ports:instance1}

[instance2]
<= instance
http-address = \${hosts:instance2}:\${ports:instance2}

[instance3]
<= instance
http-address = \${hosts:instance3}:\${ports:instance3}

[instance4]
<= instance

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls=\${groups:products-urls}
version-suffix-packages = \${groups:version-suffix-packages}
nested-packages = \${groups:nested-packages}

[instance-plain]
<= instance
zeo-client = off
zeo-address =
temporary-storage =

[instance1]
<= instance
http-address = \${hosts:instance1}:\${ports:instance1}

[instance2]
<= instance
http-address = \${hosts:instance2}:\${ports:instance2}

[instance3]
<= instance
http-address = \${hosts:instance3}:\${ports:instance3}

[instance4]
<= instance
http-address = \${hosts:instance4}:\${ports:instance4}

# eggs & scripts installation
[zopepy]
recipe = zc.recipe.egg
interpreter = zopepy
eggs =
# release helpers
    zest.releaser
    jarn.mkrelease
    z3c.checkversions [buildout]
    \${instance:eggs}
# Scripts generated filtering
scripts =
#z3c.checkversions
    checkversions
#jarn.mkrelease
    mkrelease
#zest.releaser
    project_diff
    project_eggs
    project_md5
    project_release
    package_svn_prepare
    release_eggs
    zopepy
#zope2
    repozo
    zeoctl
    zeopack
    zeopasswd #slurp
#for $product in $plone_scripts:
#if product.startswith('#'):
${product}
#else:
    ${product}
#end if
#end for
extra-paths =
    \${instance:extra-paths}
#if $major < 4
    \${locations:zope2}/lib/python
#end if

# zope.testing testrunner support
[testenv]
INSTANCE_HOME = \${locations:instance}
CONFIG_FILE = \${locations:instance}/etc/zope.conf

# See http://pypi.python.org/pypi/zc.recipe.testrunner/
[${sane_name}.test]
recipe = zc.recipe.testrunner
eggs =
    ${project} [test]
    \${instance:eggs}
extra-paths = \${instance:extra-paths}
#if $major < 4
    \${locations:zope2}/lib/python
#end if
defaults = ['--exit-with-status', '--auto-color', '--auto-progress', '-s', '${project}']
environment = testenv
extra-paths = \${zopepy:extra-paths}

[omelette]
recipe = collective.recipe.omelette
eggs = \${instance:eggs}
products = \${instance:products}
packages = #slurp
#if $major < 4
\${locations:zope2}/lib/python #slurp
#end if
    ./
    \${instance:extra-paths}

# Command below is important
# if not, fss tests or tests using fss in their configuration will fail
[mkdirs]
recipe = plone.recipe.command
update-command = \${mkdirs:command}
command =
    mkdir -pv \${locations:blob-storage};
    mkdir -pv \${locations:blob-backup};
    mkdir -pv \${locations:blob-storage};
    mkdir -pv \${locations:blob-backup};
    mkdir -pv \${locations:tmp};
    mkdir -pv \${buildout:directory}/var/log/apache;
    mkdir -pv \${buildout:directory}/var/log/nginx;
    mkdir -pv \${buildout:directory}/var/backups;\
    mkdir -pv \${buildout:directory}/var/snapshotbackups
${fsscomment}     mkdir -pv \${fssdaily:backuppath};\

[chmod]
# This recipe is used to set permissions -- and ownership for root mode installs
recipe = plone.recipe.command
update-command = \${chmod:command}
command =
    chmod 600 .installed.cfg
    find \${buildout:directory}/var -type d -exec chmod 700 {} \;
    chmod 744 \${buildout:directory}/bin/*;
    chmod -R 740 \${buildout:directory}/parts/;
    chmod -v 750 \${buildout:directory}/cron_scripts/*.sh;

[chown]
# This recipe is used to set permissions -- and ownership for root mode installs
recipe = plone.recipe.command
update-command = \${chown:command}
command =
    find \${buildout:directory} -type d -name var -exec chown -R \${users:zope}:\${users:group} {} \;
    find \${buildout:eggs-directory} -type d -name LC_MESSAGES -exec chown -R \${users:zope}:\${users:group} {} \;
    find \${buildout:eggs-directory}/Products.kupu* -type d -name i18n -exec chown -R \${users:zope}:\${users:group} {} \;
    find \${buildout:directory} -name runzope -exec chown \${users:zope}:\${users:group} {} \;

[backup]
recipe = collective.recipe.backup
blobbackuplocation = \${locations:blob-backup}/backups
blobsnapshotlocation = \${locations:blob-backup}/snapshots
keep = \${crons:nb_fullbackups_to_keep}
keep_blob_days = \${crons:nb_backups_to_keep}

[touch]
recipe = plone.recipe.command
update-command = \${touch:command}
command =
    touch \${buildout:directory}/var/log/instance1.log;
    touch \${buildout:directory}/var/log/instance.log;
    touch \${buildout:directory}/var/log/instance2.log;
    touch \${buildout:directory}/var/log/instance3.log;
    touch \${buildout:directory}/var/log/instance4.log;
    touch \${buildout:directory}/var/log/main.log;
    touch \${buildout:directory}/var/log/transform.log;

[nodejs]
recipe = gp.recipe.node
npms = coffee-script less
scripts = coffee lessc npm
url = http://nodejs.org/dist/v\${versions:nodejs}/node-v\${versions:nodejs}.tar.gz

[env]
recipe = collective.recipe.environment
PS1 =
TERMCAP =
SSH_CLIENT =
SSH_TTY =
SSH_CONNECTION =
LANG =
SHELL =

[grp]
recipe = collective.recipe.grp

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml
build-libxslt = true
build-libxml2 = true
libxslt-url = http://gentoo.tiscali.nl/distfiles/libxslt-\${versions:libxslt}.tar.gz
libxml2-url = http://gentoo.tiscali.nl/distfiles/libxml2-\${versions:libxml2}.tar.gz

[groups]
# OLD ZOPE2 PRODUCTS SUPPORT
products-urls = #slurp
#for $product in $plone_products:
#if product.startswith('#'):
${product}
#else:
    ${product}
#end if
#end for

version-suffix-packages = #slurp
#for $product in $plone_vsp:
#if product.startswith('#'):
${product}
#else:
    ${product}
#end if
#end for

nested-packages = #slurp
#for $product in $plone_np:
#if product.startswith('#'):
${product}
#else:
    ${product}
#end if
#end for

# vim:set ft=cfg:
